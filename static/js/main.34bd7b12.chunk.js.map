{"version":3,"sources":["components/WeekView/weekView.js","components/WeekView/index.js","components/DayView/index.js","components/DayView/dayView.js","App.js","reportWebVitals.js","index.js"],"names":["WeekView","data","country","setSelectedDay","unit","dayNames","locale","format","formatter","Intl","DateTimeFormat","weekday","timeZone","map","day","dd","Date","date","getDayNames","todayDay","getDay","unitType","d","index","temp","min","max","weather","icon","className","onClick","substr","parseInt","src","alt","toString","DayView","details","main","feels_like","dt_txt","hour","split","App","useState","days","setDays","setCountry","city","setCity","setUnit","selectedDay","useEffect","a","fetch","process","ipCheckResponse","json","ipData","languages","location","code","method","headers","weatherResponse","weatherData","list","first5Days","slice","daysDetailsResponse","daysDetailsData","hourDetails","i","k","dt","getDate","hourDetailDate","hours","length","getWeatherByLocation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34bd7b12.chunk.js","sourcesContent":["// thanks https://www.abeautifulsite.net/posts/getting-localized-month-and-day-names-in-the-browser/\n\nimport \"./weekView.scss\";\n\nfunction getDayNames(locale = \"en\", format = \"long\") {\n    const formatter = new Intl.DateTimeFormat(locale, {\n        weekday: format,\n        timeZone: \"UTC\"\n    });\n    const days = [1, 2, 3, 4, 5, 6, 7].map((day) => {\n        const dd = day < 10 ? `0${day}` : day;\n        return new Date(`2017-01-${dd}T00:00:00+00:00`);\n    });\n    return days.map((date) => formatter.format(date));\n}\n\nconst WeekView = ({ data, country, setSelectedDay, unit }) => {\n    const dayNames = getDayNames(country);\n    const todayDay = new Date().getDay();\n    const unitType = unit === \"metric\" ? \"°C\" : \"°F\";\n\n    return (\n        <ul>\n            {data.map((d, index) => {\n                const {\n                    temp: { min, max },\n                    weather\n                } = d;\n                const icon = weather && weather[0].icon;\n                return (\n                    <li\n                        className=\"day\"\n                        onClick={() => setSelectedDay(index + 1)}\n                        key={index.toString()}\n                    >\n                        <h3 className=\"name\">\n                            {dayNames[(todayDay + index) % 7].substr(0, 3)}\n                        </h3>\n                        <div>\n                            ↓{\" \"}\n                            {`${parseInt(min)}${unitType} ↑ ${parseInt(\n                                max\n                            )}${unitType}`}\n                        </div>\n                        {icon && (\n                            <img\n                                src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                                alt=\"icon\"\n                            />\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default WeekView;\n","import WeekView from \"./weekView\";\n\nexport default WeekView;\n\n","import DayView from \"./dayView\";\n\nexport default DayView;\n","import \"./dayView.scss\";\n\nconst DayView = ({ unit, details, setSelectedDay }) => {\n    const unitType = unit === \"metric\" ? \"°C\" : \"°F\";\n    return (\n        <>\n            <div onClick={() => setSelectedDay(null)}>←</div>\n            <ul className=\"hoursList\">\n                {details &&\n                    details.map((d, index) => {\n                        const {\n                            main: { temp, feels_like },\n                            weather,\n                            dt_txt\n                        } = d;\n                        const icon = weather && weather[0].icon;\n                        const hour = dt_txt.split(\" \")[1].substr(0, 5);\n                        return (\n                            <li className=\"hour\" key={index.toString()}>\n                                <div>{hour}</div>\n                                <h2>{`${parseInt(temp)}${unitType}`}</h2>\n                                <div>\n                                    {`feels ${parseInt(feels_like)}${unitType}`}\n                                </div>\n                                {icon && (\n                                    <img\n                                        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                                        alt=\"icon\"\n                                    />\n                                )}\n                            </li>\n                        );\n                    })}\n            </ul>\n        </>\n    );\n};\n\nexport default DayView;\n","import WeekView from \"./components/WeekView\";\nimport { useState, useEffect } from \"react\";\nimport DayView from \"./components/DayView\";\n\nfunction App() {\n    const [days, setDays] = useState([]);\n    const [country, setCountry] = useState(\"en\");\n    const [city, setCity] = useState(\"...\");\n    const [unit, setUnit] = useState(\"metric\");\n    const [selectedDay, setSelectedDay] = useState(null);\n\n    useEffect(() => {\n        async function getWeatherByLocation() {\n            const ipCheckResponse = await fetch(\n                `http://api.ipstack.com/check?access_key=${process.env.REACT_APP_IPSTACK_API_KEY}` // no https for free :(\n            );\n            const ipData = await ipCheckResponse.json();\n            const {\n                city,\n                location: { languages }\n            } = ipData;\n            setCity(city);\n            const { code } = languages[0];\n            setCountry(code);\n            let unit = \"metric\";\n            if (code === \"us\" || code === \"lr\" || code === \"mm\") {\n                unit = \"imperial\";\n            }\n\n            const weatherResponse = await fetch(\n                `https://community-open-weather-map.p.rapidapi.com/forecast/daily?q=${city}&units=${unit}`,\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"x-rapidapi-key\": process.env.REACT_APP_X_RAPID_API_KEY,\n                        \"x-rapidapi-host\":\n                            process.env.REACT_APP_X_RAPID_API_HOST\n                    }\n                }\n            );\n\n            const weatherData = await weatherResponse.json();\n            const { list } = weatherData;\n            const first5Days = list.slice(0, 5);\n            setDays(first5Days);\n            setUnit(unit);\n\n            const daysDetailsResponse = await fetch(\n                `https://community-open-weather-map.p.rapidapi.com/forecast?q=${city}&units=${unit}`,\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"x-rapidapi-key\": process.env.REACT_APP_X_RAPID_API_KEY,\n                        \"x-rapidapi-host\":\n                            process.env.REACT_APP_X_RAPID_API_HOST\n                    }\n                }\n            );\n\n            const daysDetailsData = await daysDetailsResponse.json();\n\n            const hourDetails = daysDetailsData.list;\n\n            let i = 0;\n            let k = 0;\n            let date, hourDetailDate;\n            do {\n                date = new Date(first5Days[k].dt * 1000).getDate();\n                hourDetailDate = new Date(hourDetails[i].dt * 1000).getDate();\n                if (date === hourDetailDate) {\n                    first5Days[k].hours = first5Days[k].hours\n                        ? [...first5Days[k].hours, hourDetails[i]]\n                        : [hourDetails[i]];\n\n                    i = i + 1;\n                } else {\n                    k = k + 1;\n                }\n            } while (i < hourDetails.length && k < first5Days.length);\n            setDays(first5Days);\n        }\n\n        getWeatherByLocation();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {!selectedDay ? (\n                    <h2>Weekly weather in {city}</h2>\n                ) : (\n                    <h2>Day</h2>\n                )}\n                {!selectedDay ? (\n                    <WeekView\n                        data={days}\n                        country={country}\n                        unit={unit}\n                        setSelectedDay={setSelectedDay}\n                    />\n                ) : (\n                    <DayView\n                        details={days[selectedDay].hours}\n                        unit={unit}\n                        setSelectedDay={setSelectedDay}\n                    />\n                )}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}